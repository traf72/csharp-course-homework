/******************************************************************
    1. Некоторые строки не компилируются. Почему? Исправьте код.
******************************************************************/

int i = 53;

long l = i;
float f = i;
byte b = i;
i = b;
double d = f;
b = f;
ushort us = b;
f = d;
decimal c = d;
c = i;
i = l;
i = us;
f = l;


/****************************************************************************
    2. Строки не компилируются. Почему? Исправьте код.
       Для некоторых строк предложите больше одного варианта исправления.
****************************************************************************/

short height = 342;
short width = height - 100;
height = height / 2;

var f1 = 1.5f;
var f2 = 2.5;
float product = f1 * f2;

int x = 1000;
long y = 2000;
int sum = x + y;

decimal cash = 5000m;
decimal total = cash + 50.7;

int num1 = 80342;
double num2 = 6543;
int diff = num1 - num2;


/********************************************************
    3. Объясните, почему строки ниже не компилируются.
       Предложите варианты исправления.
********************************************************/

const int constNum = 500;

byte b3 = 128 * 2;
uint ui3 = 257 - constNum;
short s3 = short.MinValue - 1;


/*************************************************************************************
    4. В строке ниже переменная "z" инкрементируется, а затем выводится в консоль.
       Но, вместо числа 128, мы видим -128. Объясните, почему так происходит.
       Объясните, почему в консоли мы видим именно число -128.
*************************************************************************************/

sbyte z = 127;
z++;
Console.WriteLine($"z = {z}");


/***********************************************************************************************
    5. Сделайте так, чтобы переполнения в коде ниже вызывали ошибку, а не происходили неявно.
***********************************************************************************************/

int bigNum = 1_984_923_475;
int overflow1 = bigNum * 2;

short overflow2 = short.MinValue;
overflow2--;


/***********************************************************************************************************************************
    6. Включите проверку переполнений глобально на уровне проекта.
       Проверьте корректность на предыдущем задании - уберите явную проверку переполнений и запустите проект.
       Если глобальная проверка включена корректно, то вы все также должны будете получать ошибку на первом переполнении overflow1.
       Отключите явно проверку для первого выражения c overflow1. Если все сделано корректно, то ошибка должна происходить
       только на последнем переполнении overflow2.
************************************************************************************************************************************/


/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   Для выполнения заданий ниже отключите глобальную проверку переполнений, а также уберите все явные
   проверки переполнений, иначе из-за ошибки программа просто прервется и не дойдёт до строк ниже.
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/

/***********************************************************************************************************************************************
    7. Исследование членов числовых типов
       7.1  Найдите и попробуйте метод в типе "int", который определяет, что число отрицательное.
       7.2  Найдите и попробуйте метод в типе "int", который определяет, что число является степенью двойки.
       7.3  Найдите и попробуйте метод в типе "int", который сравнивает два числа и возвращает меньшее из них.
       7.4  Найдите и попробуйте метод в типе "int", который гарантирует, что переданное значение находится в необходимом диапазоне.
            Если значение выходит за пределы, то возвращается минимальная, либо максимальная граница.
       7.5  Найдите и попробуйте метод в типе "double", который вычисляет квадратный корень числа.
       7.6  Найдите и попробуйте метод в типе "double", который вычисляет корень числа n-ой степени.
       7.7  Найдите и попробуйте метод в типе "double", который вычисляет степень числа.
       7.8  Найдите и попробуйте метод в типе "double", который вычисляет десятичный логарифм числа.
       7.9  Найдите и попробуйте метод в типе "double", который определяет, что число конечно (то есть, не является бесконечностью или NaN).
       7.10 Найдите и попробуйте метод в типе "decimal", который определяет, что число целое.
       7.11 Найдите и попробуйте метод в типе "decimal", который отсекает дробную часть.
       7.12 Найдите и попробуйте метод в типе "decimal", который округляет дробную часть.
       7.13 Найдите и попробуйте метод в типе "decimal", который округляет до ближайшего целого вверх.
       7.14 Найдите и попробуйте метод в типе "decimal", который округляет до ближайшего целого вниз.
************************************************************************************************************************************************/


/*******************************************************************************************************
    8. Я считываю с консоли два числа и пытаюсь сложить их между собой (см. код ниже). Но, почему-то,
       я получаю неверный ответ. Например, если я ввожу 5 и 6, я получаю в консоли 56 вместо 11.
       В чём причина? Исправьте код.
*******************************************************************************************************/

Console.Write("Enter first number: ");
var firstNum = Console.ReadLine();

Console.Write("Enter second number: ");
var secondNum = Console.ReadLine();

Console.WriteLine(firstNum + secondNum);
